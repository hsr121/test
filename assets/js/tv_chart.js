"use strict"; function ownKeys(a, b) { var c = Object.keys(a); if (Object.getOwnPropertySymbols) { var d = Object.getOwnPropertySymbols(a); b && (d = d.filter(function (b) { return Object.getOwnPropertyDescriptor(a, b).enumerable })), c.push.apply(c, d) } return c } function _objectSpread(a) { for (var b, c = 1; c < arguments.length; c++)b = null == arguments[c] ? {} : arguments[c], c % 2 ? ownKeys(Object(b), !0).forEach(function (c) { _defineProperty(a, c, b[c]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(a, Object.getOwnPropertyDescriptors(b)) : ownKeys(Object(b)).forEach(function (c) { Object.defineProperty(a, c, Object.getOwnPropertyDescriptor(b, c)) }); return a } function _defineProperty(a, b, c) { return b in a ? Object.defineProperty(a, b, { value: c, enumerable: !0, configurable: !0, writable: !0 }) : a[b] = c, a } let Language = []; Language.English = { kS: "s", kM: "m", kH: "h", kD: "d", kW: "W", kMM: "M" }, Language.Chinese = { kS: "\u79D2", kM: "\u5206", kH: "\u5C0F\u65F6", kD: "\u5929", kW: "\u5468", kMM: "\u6708" }, Language.TraditionalChinese = { kS: "\u79D2", kM: "\u5206", kH: "\u5C0F\u6642", kD: "\u5929", kW: "\u5468", kMM: "\u6708" }, Language.Korean = { kS: "\uCD08", kM: "\uBD84", kH: "\uC2DC", kD: "\uC77C", kW: "W", kMM: "M" }, Language.Vietnamese = { kS: "s", kM: "m", kH: "h", kD: "d", kW: "W", kMM: "M" }; let langu = "cn" === g_lang && Language.Chinese || "kr" === g_lang && Language.Korean || "tw" === g_lang && Language.TraditionalChinese || "vn" === g_lang && Language.Vietnamese || Language.English, timer_intervals = [10 + langu.kS, "1" + langu.kM, "5" + langu.kM, "15" + langu.kM, 30 + langu.kM, "1" + langu.kH, "4" + langu.kH, "8" + langu.kH, "1" + langu.kD, "1" + langu.kW, "1" + langu.kMM], timeArray = {}; timeArray["10" + langu.kS] = "10", timeArray["1" + langu.kM] = "60", timeArray["5" + langu.kM] = "300", timeArray["15" + langu.kM] = "900", timeArray["30" + langu.kM] = "1800", timeArray["1" + langu.kH] = "3600", timeArray["4" + langu.kH] = "14400", timeArray["8" + langu.kH] = "28800", timeArray["1" + langu.kD] = "86400", timeArray["1" + langu.kW] = 604800, timeArray["1" + langu.kMM] = 2592000; let Hourbtn, Minbtn, restorationBtn; const supportedResolutions = ["10", "1", "5", "15", "30", "60", "240", "480", "1D", "1W", "1M"], supportedResolutionsName = ["10s", "1min", "5min", "15min", "30min", "1h", "4h", "8h", "1D", "1W", "1M"], v4intervals = ["10s", "1m", "5m", "15m", "30m", "1h", "4h", "8h", "1d", "7d", "1M"]; let timezone = "Asia/Shanghai"; try { timezone = Intl.DateTimeFormat().resolvedOptions().timeZone } catch (a) { } let defaultResolution = getDefaultMode() || "30"; const buttons = [{ title: "10" + langu.kS, resolution: "10" }, { title: "1" + langu.kD, resolution: "1D" }, { title: "1" + langu.kW, resolution: "1W" }, { title: "1" + langu.kMM, resolution: "1M" }], Mbuttons = [{ title: "1" + langu.kM, resolution: "1" }, { title: "5" + langu.kM, resolution: "5" }, { title: "15" + langu.kM, resolution: "15" }, { title: "30" + langu.kM, resolution: "30" }], Hbuttons = [{ title: "1" + langu.kH, resolution: "60" }, { title: "4" + langu.kH, resolution: "240" }, { title: "8" + langu.kH, resolution: "480" }], _subs = [], tradingHistory = {}, tradingConfig = { supported_resolutions: supportedResolutions }, multiChartEvent = new EventCenter, currSymbol = trade_global.symbol; var markLineStudy = null, isShowMark = !0; localStorage.getItem("showMark") && 0 == localStorage.getItem("showMark") && (isShowMark = !0); function bias2underLine(a) { return a.replace("/", "_") } function underLine2bias(a) { return a.replace("_", "/") } function startTradingView() { let a = { subscribeBars(a, b, c, d) { var e; let f = timer_intervals_seconds[supportedResolutions.findIndex(a => a === b)]; const g = { uid: bias2underLine(d), resolution: f, symbolInfo: a, lastBar: tradingHistory[bias2underLine(a.name)].lastBar, listener: c }; _subs.push(g), 1 === (null === (e = socket) || void 0 === e ? void 0 : e.readyState) && (globalStore.isETF && a.name.match(/3S$|3L$|5S$|5L$/i) || !globalStore.isETF) && socket_send_cmd(socket, "kline.subscribe", [bias2underLine(a.name), f]) }, unsubscribeBars(a) { var b; let c = _subs.findIndex(b => b.uid === bias2underLine(a)); if (-1 !== c) { let a = _subs[c]; _subs.splice(c, 1), 1 === (null === (b = socket) || void 0 === b ? void 0 : b.readyState) && socket_send_cmd(socket, "kline.unsubscribe", [bias2underLine(a.symbolInfo.name), a.resolution]) } } }, b = localStorage.getItem("myTV"), c = JSON.parse(b); if (c) try { if (c.charts && 0 < c.charts.length) { let a = c.charts[0].panes; a.forEach((a, b) => { a.sources.forEach((a, d) => { "undefined" != typeof a.state.symbol && (c.charts[0].panes[b].sources[d].state.symbol = globalStore.market), "undefined" != typeof a.state.interval && (c.charts[0].panes[b].sources[d].state.interval = defaultResolution) }) }), a = null } } catch (a) { } const d = window.tvWidget = new TradingView.widget(_objectSpread(_objectSpread({}, tvOption), {}, { symbol: globalStore.market, interval: defaultResolution, container_id: "kline_tradingView", saved_data: c, datafeed: { onReady: a => { setTimeout(() => a(tradingConfig), 0) }, resolveSymbol: (a, b) => { const c = getSymbolStub(a, Math.pow(10, globalStore.currMarketConfig.precision_rate || 4)); setTimeout(function () { b(c) }, 0) }, getBars: function (a, b, c, d, e, f, g) { var i, j; let k = localStorage.getItem("restoration") || "0"; if (10 == b && !g) return void e([], { noData: !0 }); const l = -1 != a.name.indexOf("3L") || -1 != a.name.indexOf("3S") || -1 != a.name.indexOf("5S") || -1 != a.name.indexOf("5L"); let m = (null === (i = globalStore) || void 0 === i || null === (j = i.currMarketConfig) || void 0 === j ? void 0 : j.restoration) || []; if (l) { var n, o; m = (null === (n = globalStore) || void 0 === n || null === (o = n.currMarketConfig) || void 0 === o ? void 0 : o.etfRestoration) || [] } requestData({ trade_pair: bias2underLine(a.name), from: c, to: d, resolution: b, ok(b) { if (b && b.length) { const c = processtvbars(b, m, k); if (g) { let b = c[c.length - 1]; tradingHistory[bias2underLine(a.name)] = { lastBar: b } } e(c, { noData: !1 }) } else e([], { noData: !0 }) }, fail() { e([], { noData: !0 }) } }) }, subscribeBars: (b, c, d, e, f) => { tradingHistory[bias2underLine(b.name)] && a.subscribeBars(b, c, d, e, f) }, unsubscribeBars: b => { a.unsubscribeBars(b) }, calculateHistoryDepth: a => 10 == a ? { resolutionBack: "D", intervalBack: 2 / 24 } : 1 == a ? { resolutionBack: "D", intervalBack: .5 } : 480 >= a ? { resolutionBack: "D", intervalBack: a / 10 } : "1W" == a ? { resolutionBack: "M", intervalBack: 12 } : "1M" == a ? { resolutionBack: "M", intervalBack: 12 } : void 0 }, customFormatters: { dateFormatter: { format: function (a) { var b = localStorage.getItem("klineMode").split(",")[1]; if (8 <= b) { const b = "%h:%m:%s".replace("%h", addZeroBeforeNumber(a.getHours()), 2).replace("%m", addZeroBeforeNumber(a.getMinutes()), 2).replace("%s", addZeroBeforeNumber(a.getSeconds()), 2); return a.getUTCFullYear() + "-" + addZeroBeforeNumber(1 + a.getUTCMonth()) + "-" + addZeroBeforeNumber(a.getUTCDate()) + " " + b } return a.getUTCFullYear() + "-" + addZeroBeforeNumber(1 + a.getUTCMonth()) + "-" + addZeroBeforeNumber(a.getUTCDate()) } } } })); d.onChartReady(function () { getThemeFromStyle(), createButton(buttons, d), b || (d.chart().createStudy("Moving Average", !1, !1, [5, "close", 0], null, { "Plot.color": "#1558ef", "Plot.linewidth": 1 }), d.chart().createStudy("Moving Average", !1, !1, [10, "close", 0], null, { "Plot.color": "#ea8e0a", "Plot.linewidth": 1 }), d.chart().createStudy("Moving Average", !1, !1, [30, "close", 0], null, { "Plot.color": "#ff5d4b", "Plot.linewidth": 1 })); for (let a = 0; a < klineIndicatorArr.length; a++) { let b = klineIndicatorArr[a], c = "cn" === g_lang ? b.title : b.name, e = $(`<li title="${c}">${b.show}</li>`); e.click(function () { "MACD" == b.name ? d.chart().createStudy("GATE.IO_MACD", !1, !1) : "BOLL" == b.name ? d.chart().createStudy("BB") : d.chart().createStudy(b.name, !1, !1), changeMySkin() }), $("#kline_tradingView_Indicator_box").append(e) } if (d.subscribe("onAutoSaveNeeded", function () { d.save(function (a) { try { a.charts[0].panes.forEach(a => { a.sources = a.sources.filter(a => "study_Overlay" !== a.type) }) } catch (a) { console.log(a) } localStorage.setItem("myTV", JSON.stringify(a)) }) }), showFullBtn(), d.activeChart().onSymbolChanged().subscribe(null, () => { const a = d.chart().getAllStudies().filter(a => "Overlay" == a.name); a.forEach(a => { d.activeChart().removeEntity(a.id) }), globalStore.isETF ? ($etfButton ? $etfButton.parent().show() : createETFbutton(), drawMarkline()) : (removeMarkLine(), $etfButton && $etfButton.parent().hide()) }), window.TVCHART_MISSED_UNREADY) { var a, c, e; null === (a = tvWidget) || void 0 === a ? void 0 : a.setSymbol(window.TVCHART_MISSED_UNREADY.replace("_", "/"), null === (c = tvWidget) || void 0 === c || null === (e = c.chart()) || void 0 === e ? void 0 : e.resolution(), () => { }), window.TVCHART_MISSED_UNREADY = null } }) } $(".skin_item").on("click", function () { localStorage.removeItem("myTV"), getThemeFromStyle(), multiChartEvent.emit("change-theme") }), 0 <= document.getElementById("topSection").className.indexOf("tradingview-show") && !globalStore.mChartMode && TradingView.onready(startTradingView); function generateDateBaseOverrides() { var a = $.cookie("dark"); a || (a = 0); var b = skinList[a], c = b.greenBar, d = b.redBar, e = is_cn ? d : c, f = is_cn ? c : d, g = b.bg; return { overrides: { "mainSeriesProperties.candleStyle.borderDownColor": f, "mainSeriesProperties.candleStyle.borderUpColor": e, "mainSeriesProperties.candleStyle.downColor": f, "mainSeriesProperties.candleStyle.upColor": e, "mainSeriesProperties.candleStyle.wickDownColor": f, "mainSeriesProperties.candleStyle.wickUpColor": e, "scalesProperties.lineColor": "rgba( 120, 120, 120, 0.5)", "scalesProperties.textColor": 0 === a ? "rgb(85, 85, 85)" : "rgb(153, 153, 153)", "paneProperties.background": g, volumePaneSize: "medium" }, studies_overrides: { "volume.volume.color.0": f, "volume.volume.color.1": e } } } var skinList = [{ bg: "#FFFFFF", GridColor: "#f0f0f0", redBar: "#de596b", greenBar: "#007980" }, { bg: "#1e2026", GridColor: "#292929", redBar: "#de596b", greenBar: "#007980" }, { bg: "#0a0b0d", GridColor: "#151515", redBar: "#ff5c33", greenBar: "#21bf73" }]; function generateThemeOverrides() { var a = $.cookie("dark"); a || (a = 0); var b = skinList[a], c = b.greenBar, d = b.redBar, e = is_cn ? d : c, f = is_cn ? c : d; return changeMySkin(), { "paneProperties.background": b.bg, "paneProperties.vertGridProperties.color": b.GridColor, "paneProperties.horzGridProperties.color": b.GridColor, "mainSeriesProperties.candleStyle.borderDownColor": f, "mainSeriesProperties.candleStyle.borderUpColor": e, "mainSeriesProperties.candleStyle.downColor": f, "mainSeriesProperties.candleStyle.upColor": e, "mainSeriesProperties.candleStyle.wickDownColor": f, "mainSeriesProperties.candleStyle.wickUpColor": e } } function changeMySkin() { if ("undefined" == typeof tvWidget || !tvWidget) return; var a = $.cookie("dark"); a || (a = 0); let b = skinList[a]; var c = b.greenBar, d = b.redBar, e = is_cn ? d : c, f = is_cn ? c : d; let g = tvWidget.activeChart().createStudyTemplate({ saveInterval: !0 }), i = JSON.stringify(g), j = i; if (is_cn) for (let a = 0; a < skinList.length; a++) { let b = new RegExp(skinList[a].redBar, "g"), c = new RegExp(skinList[a].greenBar, "g"); j = j.replace(b, e).replace(c, f) } else for (let a = 0; a < skinList.length; a++) { let b = new RegExp(skinList[a].redBar, "g"), c = new RegExp(skinList[a].greenBar, "g"); j = j.replace(b, f).replace(c, e) } g = JSON.parse(j), tvWidget.activeChart().applyStudyTemplate(g) } function _calcMode(a) { return timer_intervals[a[1]] } function _getDataFromCsv(a, b, c, d, f) { let e = [30, 4]; "10" === a ? e = [10, 0] : "1" === a ? e = [1, 1] : "5" === a ? e = [5, 2] : "15" === a ? e = [15, 3] : "60" === a ? e = [1, 5] : "240" === a ? e = [4, 6] : "480" === a ? e = [8, 7] : "1D" === a ? e = [1, 8] : "1W" === a ? e = [1, 9] : "1M" === a ? e = [1, 10] : void 0; localStorage.setItem("klineMode", e), currLineMode = e, g_pointLastTime = null; let g = _calcMode(e), i = ""; i = "/json_svr/query/?u=10&c=" + Math.floor(Math.random() * Math.floor(1e7)) + "&type=tvkline&symbol=" + b.toLowerCase() + "&from=" + c + "&to=" + d + "&interval=" + parseInt(timeArray[g]), $.ajax({ type: "post", url: i, dataType: "text", success: function (a) { if (a) { a = a.split(/\n/); let b = a[0].split(","); a.shift(); let c = []; for (let d, e = 0; e < a.length; e++) { if (d = a[e], !d) continue; let f = a[e].split(","); for (let a = 0; a < f.length; a++)c[e] || (c[e] = {}), c[e][b[a]] = parseFloat(f[a]) } f(c), _setLocalStorage("Kline_" + globalStore.market.toLowerCase() + "_" + g, JSON.stringify(c), g) } else f() }, error: function (a) { f(), console.log(lang_string("\u7F51\u7EDC\u9519\u8BEF") + "!", "error" + a) } }) } function _setLocalStorage(a, b, c) { let d = []; for (let e, f = 0; f < localStorage.length; f++)e = localStorage.key(f), -1 < e.indexOf("30") && -1 < e.indexOf("Kline") && d.push(e); if (3 < d.length) for (let a = 0; a < d.length - 3; a++)for (let b in localStorage.removeItem(d[a]), timer_intervals) localStorage.removeItem(d[a].replace(c, timer_intervals[b])); LocalStorage.set(a, b) } function requestData({ trade_pair: a, from: b, to: c, resolution: d, ok: e, fail: f }) { _getDataFromCsv(d, a, b, c, function (a) { a ? e(a) : f() }) } function isFullScreen() { return !!(document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.webkitFullScreen || document.msFullScreen) } function drawMarkline() { const a = globalStore.market.replace(/(\dl|\ds)/i, ""); removeMarkLine(), markLineStudy = tvWidget.chart().createStudy("Overlay", !0, !0, [a], null, { priceScale: "no-scale" }) } function removeMarkLine() { markLineStudy && tvWidget.activeChart().removeEntity(markLineStudy), markLineStudy = null } let $etfButton; function createETFbutton() { $etfButton = $(`<div></div>`); let a = $(`<div class="etfButton"></div>`); a.append($etfButton), $(".klineLeftBtnBox .timeBtns").append(a), $etfButton.addClass("chart-header-indicator-icon").attr("title", isShowMark ? lang_string("\u76EE\u6807\u5E01\u4EF7\u663E\u793A") : lang_string("\u76EE\u6807\u5E01\u4EF7\u9690\u85CF")).html(`<img src="/images/${isShowMark ? "showMark" : "hideMark"}.svg">`).on("click", function () { markLineStudy && (tvWidget.chart().getStudyById(markLineStudy).setVisible(!isShowMark), $(this).find("img").attr("src", `/images/${isShowMark ? "hideMark" : "showMark"}.svg`), $(this).attr("title", isShowMark ? lang_string("\u76EE\u6807\u5E01\u4EF7\u9690\u85CF") : lang_string("\u76EE\u6807\u5E01\u4EF7\u663E\u793A")), localStorage.setItem("showMark", +!isShowMark), isShowMark = !isShowMark) }) } function createButton(a, b) { $(".timeBtns>*").remove(); for (let c = 0; c < a.length; c++) { let d = a[c], e = $(`<div></div>`), f = $(`<div class="my-group-date"></div>`); if (f.append(e), $(".klineLeftBtnBox .timeBtns").append(f), e.attr("title", d.title).addClass("mydate").text(d.title).on("click", function () { return $("#restoration").hide(), $("#Mresolution").hide(), $("#Hresolution").hide(), !$(this).parent().hasClass("active") && void ($(".my-group-date").removeClass("active"), $(this).parent().addClass("active"), b.chart().setResolution(d.resolution, function () { })) }).parent().addClass("my-group-date" + (d.resolution === defaultResolution ? " active" : "")), 0 == c) { let a = Mbuttons.filter(function (a) { return a.resolution == defaultResolution }); Minbtn = $(`<div></div>`); let c = $(`<div class="my-group-date"></div>`); c.append(Minbtn), $(".klineLeftBtnBox .timeBtns").append(c), Minbtn.attr("title", 0 == a.length ? Mbuttons[0].title : a[0].title).addClass("mydate").text((0 == a.length ? Mbuttons[0].title : a[0].title) + "\u25BE").parent().addClass("my-group-date" + (1 == defaultResolution || 5 == defaultResolution || 15 == defaultResolution || 30 == defaultResolution ? " active" : "")); for (let a = 0; a < Mbuttons.length; a++)$("#Mresolution").children().eq(a).text(Mbuttons[a].title).off("click").on("click", function () { b.chart().setResolution(Mbuttons[a].resolution, function () { }), Minbtn.text(Mbuttons[a].title + "\u25BE"), $("#Mresolution").hide(), Minbtn.parents(".my-group-date").hasClass("active") || ($(".my-group-date").removeClass("active"), Minbtn.parents(".my-group-date").addClass(" active")) }); Minbtn.on("mouseover", function () { $("#Mresolution").css("left", `${Minbtn.offset().left}px`), $("#Mresolution").css("top", `${Minbtn.offset().top - $(document).scrollTop()}px`), $("#Mresolution").show(), $("#Hresolution").hide(), $("#restoration").hide() }); let d = Hbuttons.filter(function (a) { return a.resolution == defaultResolution }); Hourbtn = $(`<div></div>`); let e = $(`<div class="my-group-date"></div>`); e.append(Hourbtn), $(".klineLeftBtnBox .timeBtns").append(e), Hourbtn.attr("title", 0 == d.length ? Hbuttons[0].title : d[0].title).addClass("mydate").text((0 == d.length ? Hbuttons[0].title : d[0].title) + "\u25BE").parent().addClass("my-group-date" + (60 == defaultResolution || 240 == defaultResolution || 480 == defaultResolution ? " active" : "")); for (let a = 0; a < Hbuttons.length; a++)$("#Hresolution").children().eq(a).text(Hbuttons[a].title).off("click").on("click", function () { b.chart().setResolution(Hbuttons[a].resolution, function () { }), Hourbtn.text(Hbuttons[a].title + "\u25BE"), $("#Hresolution").hide(), Hourbtn.parents(".my-group-date").hasClass("active") || ($(".my-group-date").removeClass("active"), Hourbtn.parents(".my-group-date").addClass(" active")) }); Hourbtn.on("mouseover", function () { $("#Hresolution").css("left", `${Hourbtn.offset().left}px`), $("#Hresolution").css("top", `${Hourbtn.offset().top - $(document).scrollTop()}px`), $("#Hresolution").show(), $("#Mresolution").hide(), $("#restoration").hide() }) } } let c = [{ title: lang_string("\u524D\u590D\u6743"), key: "0" }, { title: lang_string("\u4E0D\u590D\u6743"), key: "1" }, { title: lang_string("\u540E\u590D\u6743"), key: "2" }], d = localStorage.getItem("restoration"), e = c.filter(function (a) { return a.key == d }); restorationBtn = $(`<div></div>`); let f = $(`<div class="my-group-restoration"></div>`); f.append(restorationBtn), $(".klineLeftBtnBox .timeBtns").append(f), restorationBtn.attr("title", 0 == e.length ? c[0].title : e[0].title).addClass("mydate").text((0 == e.length ? c[0].title : e[0].title) + "\u25BE").parent().addClass("restoration active"); for (let d = 0; d < c.length; d++)$("#restoration").children().eq(d).text(c[d].title).off("click").on("click", function () { if (localStorage.setItem("restoration", c[d].key), restorationBtn.text(c[d].title + "\u25BE"), 0 !== globalStore.currMarketConfig.restoration.length || 0 !== globalStore.currMarketConfig.etfRestoration.length) { const a = b.activeChart().resolution(); b.chart().setResolution("1M", function () { b.chart().setResolution(a, function () { }) }) } $("#restoration").hide() }); restorationBtn.on("mouseover", function () { $("#restoration").css("left", `${restorationBtn.offset().left}px`), $("#restoration").css("top", `${restorationBtn.offset().top - $(document).scrollTop()}px`), $("#restoration").show(), $("#Mresolution").hide(), $("#Hresolution").hide() }), $("#Hresolution").on("mouseleave", function () { $("#Hresolution").hide() }), $("#restoration").on("mouseleave", function () { $("#restoration").hide() }), $("#Mresolution").on("mouseleave", function () { $("#Mresolution").hide() }), $("#kline_set").off("click").on("click", function () { b && (b.closePopupsAndDialogs(), b.chart().executeActionById("chartProperties")) }), $("#kline_indicator").off("click").on("click", function () { b && (b.closePopupsAndDialogs(), b.chart().executeActionById("insertIndicator")) }), $(".kline_line_type_list").off("click").on("click", function (a) { let c = a.currentTarget, d = $(c).attr("data-kline-value"), e = $(c).find(".kline_line_type_list_svg").html(); b && ($("#kline_line_type > .kline_btn").html(e), b.applyOverrides({ "mainSeriesProperties.style": parseInt(d) })) }) } function getThemeFromStyle() { var a = localStorage.getItem("myTV"); if (a) { a = JSON.parse(a); var b = a.charts[0].chartProperties.paneProperties.background, c = 0; for (let a = 0; a < skinList.length; a++) { var d = skinList[a].bg; b == d && (c += 1) } if (1 > c) { try { if (a.charts && 0 < a.charts.length) { let b = a.charts[0].panes; b.forEach((b, c) => { b.sources.forEach((b, d) => { "undefined" != typeof b.state.symbol && (a.charts[0].panes[c].sources[d].state.symbol = globalStore.market), "undefined" != typeof b.state.interval && (a.charts[0].panes[c].sources[d].state.interval = defaultResolution) }) }), b = null } } catch (a) { } return void tvWidget.load(a) } } return new Promise(() => { setTimeout(() => { if ("undefined" == typeof tvWidget || !tvWidget._ready) return; const a = $(".theme-style"); let b = ""; 0 !== a.length && "disabled" !== a.attr("disabled") && (b = a.attr("id")), tvWidget.changeTheme(b ? "Dark" : "Light"); const c = generateThemeOverrides(b); tvWidget.applyOverrides(c) }, 50) }) } var tvcurStatus = $.cookie("show_tv") || 1, klineStatus = getKlineStatus(), $openKlineBtn = $("#js-open-kline"), $klineContainer = $("#topSection"), $tradeMain = $(".trade-main"), klineShowStatus = 5 == klineStatus ? 4 : klineStatus; $(function () { 1 == tvcurStatus ? $(".klineLeftBtnBox").show() : $(".klineLeftBtnBox").hide() }), $(".changeKlineType").on("click", "span", function () { if ($(this).addClass("mode-active").siblings().removeClass("mode-active"), 1 === $(this).index()) { $(".klineLeftBtnBox").hide(), tvcurStatus = 0; let a = $(".choosen").find(".timeline_btn")[0]; $(a).click(), $.cookie("show_tv", 0, { expires: 7, path: "/", secure: !0 }), $("#topSection").removeClass("tradingview-show"), runKline(0, 1); let b = $.cookie("dark"); (!b || "1" !== b) && (get_element("lightChart") ? get_element("lightChart").click() : get_element("darkChart") && get_element("darkChart").click()), hideLeftDepBtn(), switchFullBtnPos(1) } else if (2 === $(this).index()) { $(".klineLeftBtnBox").hide(), tvcurStatus = 2, $.cookie("show_tv", 2, { expires: 7, path: "/", secure: !0 }), $("#topSection").removeClass("tradingview-show"), runKline(0, 1); let a = $.cookie("dark"); (!a || "1" !== a) && (get_element("lightChart") ? get_element("lightChart").click() : get_element("darkChart") && get_element("darkChart").click()); let b, c = 0; clearInterval(b), b = setInterval(() => { ++c; let a = $(".choosen").find(".timeline_btn")[2]; a && ($(a).click(), $(".choosen").hide(), clearInterval(b)), 600 <= c && ($(a).click(), $(".choosen").hide(), clearInterval(b)) }, .1), switchFullBtnPos(2) } else 0 === $(this).index() && ($(".klineLeftBtnBox").show(), tvcurStatus = 1, switchFullBtnPos(0), $.cookie("show_tv", 1, { expires: 7, path: "/", secure: !0 }), $("#topSection").addClass("tradingview-show"), "undefined" != typeof tvWidget && tvWidget && tvWidget.chart().resolution() === getDefaultMode() || startTradingView()); calcLeftBarHeight(), 2 == klineShowStatus && setLargeView(), 3 == klineShowStatus && setLargerView() }); function hideLeftDepBtn() { let a, b = 0; clearInterval(a), a = setInterval(() => { ++b; let c = $(".choosen").find(".timeline_btn")[2]; c && ($(c).hide(), clearInterval(a)), 500 <= b && ($(c).hide(), clearInterval(a)) }, 1) } function showDepView() { let a, b = 0; clearInterval(a), a = setInterval(() => { ++b; let c = $(".choosen").find(".timeline_btn")[2]; c && ($(c).click(), $(".choosen").hide(), clearInterval(a)), 600 <= b && ($(c).click(), $(".choosen").hide(), clearInterval(a)) }, 100) } function switchFullBtnPos(a) { var b = $(".fullscreen-btn"); b && (0 == a && "undefined" == typeof tvWidget && hideFullBtn(), 1 == a && (hideFullBtn(), realTimefullbtn())) } function showFullBtn() { var a = $(".fullscreen-btn"); a && a.removeClass("fullbtn-hide") } function hideFullBtn() { var a = $(".fullscreen-btn"); a && !a.hasClass("fullbtn-hide") && a.addClass("fullbtn-hide") } function realTimefullbtn() { if (0 == tvcurStatus) { let a; clearInterval(a), a = setInterval(() => { 0 < $("#klineType").children().length && (showFullBtn(), clearInterval(a)) }, 10) } } function getKlineStatus() { var a = localStorage.getItem("lastKlineStatus") || 4; return a = 1 < parseInt(a) ? a : 4, a } function setLargeView() { $tradeMain.removeClass("kline-bigger-major kline-bigger-concise"), 1 == tvcurStatus ? $tradeMain.addClass("kline-bigger-major") : ($tradeMain.addClass("kline-bigger-concise"), "function" == typeof runKline && runKline(0, 1)) } function setLargerView() { $tradeMain.removeClass("kline-biggest-major kline-biggest-concise"), 1 == tvcurStatus ? $tradeMain.addClass("kline-biggest-major") : ($tradeMain.addClass("kline-biggest-concise"), "function" == typeof runKline && runKline(0, 1)) } function setHideView() { $klineContainer && $klineContainer.addClass("hide"), $openKlineBtn && $openKlineBtn.removeClass("hide"), $("#js-trade-tabs").addClass("kline-hide") } (function () { function a(a) { try { var b = a.requestFullScreen || a.webkitRequestFullScreen || a.mozRequestFullScreen || a.msRequestFullScreen; if (b) b.call(a); else if ("undefined" != typeof window.ActiveXObject) { var c = new ActiveXObject("WScript.Shell"); null !== c && c.SendKeys("{F11}") } } catch (a) { } } function b() { try { var a = document.exitFullscreen || document.mozCancelFullScreen || document.mozExitFullscreen || document.webkitExitFullscreen || document.webkitCancelFullScreen || document.msExitFullscreen; if (a) a.call(document); else if ("undefined" != typeof window.ActiveXObject) { var b = new ActiveXObject("WScript.Shell"); null !== b && b.SendKeys("{F11}") } } catch (a) { } } function c() { return !!(document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.webkitFullScreen || document.msFullScreen) } function d() { var a = document.fullscreenElement || document.msFullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || !1; return a } function e() { d() || $("#topSection").removeClass("fullscreen") } function f() { $("#topSection").addClass("fullscreen"); var b = document.getElementById("topSection"); a(b) } function g() { b(), $("#topSection").removeClass("fullscreen") } function i(a) { $tradeMain.removeClass("kline-bigger-major kline-bigger-concise kline-biggest-major kline-biggest-concise"), 1 == a ? f() : 5 == a ? (c() && g(), setHideView()) : 4 == a ? (c() && g(), 1 !== tvcurStatus && runKline(0, 1)) : 2 == a ? (c() && g(), setLargeView()) : 3 == a && (c() && g(), setLargerView()), (2 == a || 3 == a || 4 == a) && (klineShowStatus = a), 1 < a && localStorage.setItem("lastKlineStatus", a) } function j(a) { $("#fulltip li").each(function () { $(this).hasClass(a) && $(this).removeClass(a) }) } function k(a) { j("cur-sel"), $("#fulltip li").eq(a - 1).removeClass("").addClass("cur-sel") } document.addEventListener("fullscreenchange", function () { e() }, !1), document.addEventListener("mozfullscreenchange", function () { e() }, !1), document.addEventListener("webkitfullscreenchange", function () { e() }, !1), document.addEventListener("msfullscreenchange", function () { e() }, !1), window.onresize = function () { 0 == tvcurStatus ? hideLeftDepBtn() : 2 == tvcurStatus && showDepView() }, function () { var a = null, b = null; $(".fullscreen-btn").on("mouseenter", function () { a && (clearTimeout(a), a = null), b && (clearTimeout(b), b = null), a = setTimeout(() => { $("#fulltip").show() }, 300) }).on("mouseleave", function () { b = setTimeout(() => { j("cur-hover"), $("#fulltip").hide(), a && (clearTimeout(a), a = null) }, 200) }), $("#fulltip").delegate("li", "click mouseenter", function (a) { var b = $(this), c = $(this).siblings("li"); if ("click" == a.type) { if (b.hasClass("cur-sel")) return !1; c.removeClass("cur-sel"), b.addClass("cur-sel"), i($(this).index() + 1), $("#fulltip").hide() } else "mouseenter" != a.type || b.hasClass("cur-sel") || (c.removeClass("cur-hover"), b.addClass("cur-hover")) }), $openKlineBtn.on("click", function () { $klineContainer && $klineContainer.removeClass("hide"), $openKlineBtn && $openKlineBtn.addClass("hide"), $("#js-trade-tabs").removeClass("kline-hide"), 2 == klineShowStatus && setLargeView(), 3 == klineShowStatus && setLargerView(), k(klineShowStatus), 1 !== tvcurStatus && runKline(0, 1), 1 < klineShowStatus && localStorage.setItem("lastKlineStatus", klineShowStatus) }) }(), realTimefullbtn(), 2 == klineStatus ? setLargeView() : 3 == klineStatus ? setLargerView() : 5 == klineStatus && setHideView(), k(klineStatus) })(); var klineIndicatorArr = [{ id: "uaHWfN", name: "Moving Average", show: "MA", title: "\u79FB\u52A8\u5E73\u5747\u7EBF(Moving Average)" }, { id: "OjX8RY", name: "EMA Cross", show: "EMA", title: "EMA\u4EA4\u53C9" }, { id: "W0YSYc", name: "Volume", show: "Volume", title: "\u6210\u4EA4\u91CF(Volume)" }, { id: "HZOMIN", name: "MACD", show: "MACD", title: "MACD" }, { id: "HZODIN", name: "KDJ", show: "KDJ", title: "KDJ" }, { id: "pcs4mv", name: "Bollinger Bands", show: "BOLL", title: "\u5E03\u6797\u5E26(Bollinger Bands)" }, { id: "D4dMoc", name: "Relative Strength Index", show: "RSI-S-I", title: "\u76F8\u5BF9\u5F3A\u5F31\u6307\u6807(Relative Strength Index)" }, { id: "LhKUqk", name: "Stochastic", show: "Stochastic", title: "\u968F\u673A\u6307\u6570(Stochastic)" }, { id: "ipIKbM", name: "Stochastic RSI", show: "S-RSI", title: "\u968F\u673A\u76F8\u5BF9\u5F3A\u5F31\u6307\u6570(Stoch RSI)" }, { id: "ugXVfV", name: "SMI Ergodic Indicator/Oscillator", show: "SMI", title: "SMI \u904D\u5386\u6027\u6307\u6807(SMI Ergodic Indicator/Oscillator)" }, { id: "fyjC1C", name: "TRIX", show: "TRIX", title: "\u4E09\u91CD\u6307\u6570\u5E73\u6ED1\u79FB\u52A8\u5E73\u5747\u7EBF(TRIX)" }, { id: "7MJ2Np", name: "Price Oscillator", show: "PO", title: "\u4EF7\u683C\u6446\u52A8\u6307\u6807(Price Oscillator)" }, { id: "kQ7mgx", name: "Price Channel", show: "PC", title: "\u4EF7\u683C\u901A\u9053(Price Channel)" }, { id: "DdOAB2", name: "Price Volume Trend", show: "PVT", title: "\u4EF7\u91CF\u8D8B\u52BF\u6307\u6807(Price Volume Trend)" }, { id: "k4YYZz", name: "Coppock Curve", show: "CC", title: "\u4F30\u6CE2\u66F2\u7EBF(Coppock Curve)" }, { id: "x80g5W", name: "Klinger Oscillator", show: "KO", title: "\u514B\u6797\u683C\u6210\u4EA4\u91CF\u6446\u52A8\u6307\u6807(Klinger Oscillator)" }, { id: "ijoZE1", name: "Net Volume", show: "NV", title: "\u51C0\u6210\u4EA4\u91CF(Net Volume)" }, { id: "NM5aJh", name: "Know Sure Thing", show: "KST", title: "\u52A0\u6743\u603B\u548C\u53D8\u52A8\u7387(Know Sure Thing)" }, { id: "oN8761", name: "Directional Movement", show: "DM", title: "\u52A8\u5411\u6307\u6807(Directional Movement)" }, { id: "phecMP", name: "Momentum", show: "Momentum", title: "\u52A8\u91CF\u6307\u6807(Momentum)" }, { id: "Wlut2T", name: "Awesome Oscillator", show: "AO", title: "\u52A8\u91CF\u9707\u8361\u6307\u6807(Awesome Oscillator)" }, { id: "Yiat0U", name: "Historical Volatility", show: "HV", title: "\u5386\u53F2\u6CE2\u52A8\u7387(Historical Volatility)" }, { id: "UAWfmE", name: "Rate Of Change", show: "Rate", title: "\u53D8\u5316\u901F\u7387(Rate Of Change)" }, { id: "PxOq2J", name: "Commodity Channel Index", show: "CCI", title: "\u5546\u54C1\u8DEF\u5F84\u6307\u6807(Commodity Channel Index)" }, { id: "2aLpbC", name: "Balance of Power", show: "Balance", title: "\u5747\u52BF\u6307\u6807(Balance of Power)" }, { id: "p4gPuC", name: "Williams %R", show: "Williams", title: "\u5A01\u5EC9\u59C6\u65AF\u6307\u6807" }, { id: "AsyeFK", name: "Bollinger Bands Width", show: "BBW", title: "\u5E03\u6797\u5E26\u5BBD\u5EA6(Bollinger Bands Width)" }, { id: "2xfkiU", name: "Average Directional Index", show: "ADI", title: "\u5E73\u5747\u8D8B\u5411\u6307\u6570(Average Directional Index)" }, { id: "KMSSuC", name: "Connors RSI", show: "C-RSI", title: "\u5EB7\u7EB3\u76F8\u5BF9\u5F3A\u5F31\u6307\u6307\u6570(CRSI)" }, { id: "5sXQqf", name: "Volume Oscillator", show: "VO", title: "\u6210\u4EA4\u91CF\u6446\u52A8\u6307\u6807(Volume Oscillator)" }, { id: "Sd22Ro", name: "Accumulative Swing Index", show: "ASI", title: "\u632F\u52A8\u5347\u964D\u6307\u6807(ASI)" }, { id: "cwzMqk", name: "Vortex Indicator", show: "VI", title: "\u65CB\u6DA1\u6307\u6807(Vortex Indicator)" }, { id: "yA1xdk", name: "Mass Index", show: "MI", title: "\u6885\u65AF\u7EBF(Mass Index)" }, { id: "hpPWWI", name: "Chop Zone", show: "CZ", title: "\u6CE2\u52A8\u533A\u95F4(Chop Zone)" }, { id: "g26zLb", name: "Choppiness Index", show: "CI", title: "\u6CE2\u52A8\u6307\u6570(Choppiness Index)" }, { id: "bpMVqT", name: "Advance/Decline", show: "A/D", title: "\u6DA8\u8DCC\u6BD4(Advance/Decline)" }, { id: "cMfk8k", name: "Relative Volatility Index", show: "RVI", title: "\u76F8\u5BF9\u79BB\u6563\u6307\u6570(Relative Volatility Index)" }, { id: "BKeaLd", name: "True Strength Indicator", show: "TSI", title: "\u771F\u5B9E\u5F3A\u5EA6\u6307\u6807(True Strength Indicator)" }, { id: "TzjpVb", name: "Average True Range", show: "ATR", title: "\u771F\u5B9E\u6CE2\u52A8\u5E45\u5EA6\u5747\u503C(Average True Range)" }, { id: "9FPGdk", name: "Ease Of Movement", show: "EOM", title: "\u7B80\u6613\u6CE2\u52A8\u6307\u6807(Ease Of Movement)" }, { id: "w5LpPY", name: "Accumulation/Distribution", show: "A/D", title: "\u7D2F\u79EF/\u6D3E\u53D1\u7EBF(Accumulation/Distribution)" }, { id: "OWNhJS", name: "Ultimate Oscillator", show: "UO", title: "\u7EC8\u6781\u6CE2\u52A8\u6307\u6807(Ultimate Oscillator)" }, { id: "dNrSoj", name: "On Balance Volume", show: "OBV", title: "\u80FD\u91CF\u6F6E\u6307\u6807(On Balance Volume)" }, { id: "XCdvK3", name: "Elder's Force Index", show: "Elder's", title: "\u827E\u8FBE\u5C14\u5F3A\u529B\u6307\u6570(Elder's Force Index)" }, { id: "rIZRzz", name: "Chaikin Money Flow", show: "CMF", title: "\u8521\u91D1\u8D44\u91D1\u6D41\u91CF(Chaikin Money Flow)" }, { id: "dPSaNc", name: "Chaikin Oscillator", show: "CO", title: "\u8521\u91D1\u8D44\u91D1\u6D41\u91CF\u9707\u8361\u6307\u6807(Chaikin Oscillator)" }, { id: "qCIXgU", name: "Fisher Transform", show: "FT", title: "\u8D39\u820D\u5C14\u8F6C\u6362(Fisher Transform)" }, { id: "tm8DIy", name: "Money Flow", show: "MF", title: "\u8D44\u91D1\u6D41\u91CF(Money Flow)" }, { id: "LvIRR1", name: "Chande Momentum Oscillator", show: "CMO", title: "\u94B1\u5FB7\u52A8\u91CF\u6446\u52A8\u6307\u6807(Chande Momentum Oscillator)" }, { id: "BB82iG", name: "Aroon", show: "Aroon", title: "\u963F\u9686\u6307\u6807(Aroon)" }, { id: "HIxbB7", name: "Detrended Price Oscillator", show: "DPO", title: "\u975E\u8D8B\u52BF\u4EF7\u683C\u6446\u52A8\u6307\u6807(Detrended Price Oscillator)" }]; const tvOption = { fullscreen: !1, timezone, autosize: !0, client_id: "tradingview.com", user_id: "public_user_id", theme: $.cookie("dark") ? "Dark" : "Light", overrides: generateDateBaseOverrides().overrides, studies_overrides: _objectSpread({ "Overlay.style": 2, "Overlay.lineStyle.color": "#881b88", "Overlay.lineStyle.priceSource": "close", "Overlay.lineStyle.linewidth": 2 }, generateDateBaseOverrides().studies_overrides), custom_css_url: "/css/tradingview.css?v=" + tradingview_css_version, library_path: "/js/charting_library/", indicators_file_name: "/js/charting_library/static/gci.js", locale: { cn: "zh", tw: "zh_TW", en: "en", kr: "ko", vn: "vi", es: "es", ru: "ru", th: "th" }[g_lang], enabled_features: ["hide_last_na_study_output", "left_toolbar", "hide_left_toolbar_by_default", "adaptive_logo", "side_toolbar_in_fullscreen_mode", "seconds_resolution", "cl_feed_return_all_data"], disabled_features: ["header_widget", "header_resolutions", "legend_context_menu", "volume_force_overlay", "timeframes_toolbar", "display_market_status", "compare_symbol", "go_to_date", "header_compare", "header_interval_dialog_button", "header_screenshot", "header_symbol_search", "header_undo_redo", "show_hide_button_in_legend", "snapshot_trading_drawings", "symbol_info", "border_around_the_chart", "remove_library_container_border", "header_saveload", "show_interval_dialog_on_key_press", "header_fullscreen_button"] }; window.allsubscriptions = []; const MultiChartSingle = inject("store")(observer(function ({ store: a, index: b, wssend: c, wsunsubscribe: d, eventcenter: e }) { const f = a.tabMarkets[b], g = b === a.mChartAcitve, i = useRef(), j = useRef([]), k = useRef([]), l = `chart-single-${b}`; window.allsubscriptions[b] = j; const m = localStorage.getItem(`tv-single-resolution-${b}`), n = a.tabMarkets.filter(a => a).length, o = () => { setTimeout(() => { var a; if ("undefined" == typeof i.current || null === (a = i.current) || void 0 === a || !a._ready) return; const b = $(".theme-style"); let c = ""; 0 !== b.length && "disabled" !== b.attr("disabled") && (c = b.attr("id")), i.current.changeTheme(c ? "Dark" : "Light"); const d = generateThemeOverrides(c); i.current.applyOverrides(d) }, 50) }; useEffect(() => (multiChartEvent.on("change-theme", function () { o() }), e.on("spotcandlesticks", function (a) { const b = j.current.find(b => b.uid === (null === a || void 0 === a ? void 0 : a.n)); if (b) { const c = { close: +a.c, high: +a.h, low: +a.l, name: f, open: +a.o, time: 1e3 * a.t, volume: +a.a }; b.listener(c), b.lastBar = c } }), () => { e.off("spotcandlesticks") }), [f]); const p = () => { const a = { subscribeBars(a, b, d, e) { const f = uidtocutomuid(bias2underLine(e)); let g = v4intervals[supportedResolutions.findIndex(a => a === b)]; const i = bias2underLine(a.name), l = { uid: f, resolution: g, symbolInfo: a, lastBar: k.current[i].lastBar, listener: d }; j.current.push(l), c({ channel: "spot.candlesticks", payload: [g, i] }) }, unsubscribeBars(a) { const b = uidtocutomuid(a); let c = j.current.findIndex(a => a.uid === b); if (-1 === c) return void console.log("No subscription:", a); let e = j.current[c]; j.current.splice(c, 1), window.allsubscriptions.find(a => a.current.find(a => a.uid === b)) || d({ channel: "spot.candlesticks", payload: [e.resolution, e.symbolInfo.name] }) } }; i.current = new TradingView.widget(_objectSpread(_objectSpread({}, tvOption), {}, { symbol: f, interval: m || 30, container_id: l, datafeed: { onReady: a => { setTimeout(() => a(tradingConfig), 0) }, resolveSymbol: (a, b) => { var c; const d = Math.pow(10, (null === (c = getMarketConfig(bias2underLine(a))) || void 0 === c ? void 0 : c.precision_rate) || 4), e = getSymbolStub(a, d); setTimeout(function () { b(e) }, 0) }, getBars: function (a, b, c, d, e, g, i) { var j; let l = localStorage.getItem("restoration") || "0"; if (10 == b && !i) return void e([], { noData: !0 }); const m = a.name.match(/3S$|3L$|5S$|5L$/i); let n = (null === (j = getMarketConfig(f)) || void 0 === j ? void 0 : j.restoration) || []; if (m) { var o; n = (null === (o = getMarketConfig(f)) || void 0 === o ? void 0 : o.etfRestoration) || [] } requestData({ trade_pair: bias2underLine(a.name), from: c, to: d, resolution: b, ok(b) { if (b && b.length) { const c = processtvbars(b, n, l); if (i) { let b = c[c.length - 1]; k.current[bias2underLine(a.name)] = { lastBar: b } } e(c, { noData: !1 }) } else e([], { noData: !0 }) }, fail() { e([], { noData: !0 }) } }) }, subscribeBars: (b, c, d, e, f) => { k.current[bias2underLine(b.name)] && a.subscribeBars(b, c, d, e, f) }, unsubscribeBars: b => { a.unsubscribeBars(b) }, calculateHistoryDepth: a => 10 == a ? { resolutionBack: "D", intervalBack: 2 / 24 } : 1 == a ? { resolutionBack: "D", intervalBack: .5 } : 480 >= a ? { resolutionBack: "D", intervalBack: a / 10 } : "1W" == a ? { resolutionBack: "M", intervalBack: 12 } : "1M" == a ? { resolutionBack: "M", intervalBack: 12 } : void 0 } })), i.current.onChartReady(function () { o() }) }; useEffect(() => { var a; if (!f && "undefined" != typeof i.current) { console.log("clear chart"); try { i.current.remove() } catch (a) { console.log(a) } i.current = null } else f && (null === (a = i.current) || void 0 === a ? void 0 : a._ready) ? i.current.setSymbol(f.replace("_", "/"), i.current.chart().resolution(), () => { console.log(`chart ${b} market changed to: ${f}`) }) : f && !i.current && p() }, [f]), useEffect(() => () => { if ("undefined" != typeof i.current && i.current) { try { i.current.remove() } catch (a) { console.log(a) } i.current = null } }, []); const q = useRef(), [r, s] = useState(!1), [t, u] = useState(m || 30), v = supportedResolutionsName[supportedResolutions.findIndex(a => a == t)]; useOnClickOutside(q, () => { s(!1) }); let w, x, y = "red"; return "undefined" != typeof getMarketLastPriceFromLeftbar && ([w, x] = getMarketLastPriceFromLeftbar(f), 0 > x && (y = "green")), h("div", { onClick: () => a.setActiveChartIndex(b), className: `multichart-single-container ${g ? "active" : ""}` }, f && h("div", { className: "single-tv-chart-title" }, h("div", null, h("span", { className: "title-market-name com-color3 font-dinmd" }, underLine2bias(f)), h("span", { className: `title-name-price com-color3 multiple-market-price-${f}` }, w || "--"), h("span", { className: `multiple-market-change-${f} ${y}` }, x, "%")), h("div", { className: "flex title-right-icons com-color2" }, h("div", { ref: q }, h("span", { onClick: () => s(!r) }, v, h("svg", { style: { transition: "all 0.3s", marginLeft: 0, fontSize: 12, transform: `rotate(${r ? 180 : 0}deg)` }, className: "icon", "aria-hidden": "true" }, h("use", { xlinkHref: "#gt_arrow_down_noodle" }))), h(TvTimeSelect, { index: b, widget: i.current, show: r, resolution: t, onChange: a => { u(a), s(!1) } })), h("svg", { className: "icon tv_indicator_icon", "aria-hidden": "true", onClick: () => { var a; (null === (a = i.current) || void 0 === a ? void 0 : a._ready) && (i.current.closePopupsAndDialogs(), i.current.chart().executeActionById("insertIndicator")) } }, h("use", { xlinkHref: "#gt_k_index" })), h("svg", { className: "icon", "aria-hidden": "true", onClick: () => { f && (a.setMchartmode(!1), a.setMarket(f), "0" === $.cookie("show_tv") && "undefined" != typeof runKline ? runKline(0, 1) : ("undefined" == typeof tvWidget || !tvWidget) && startTradingView()) } }, h("use", { xlinkHref: "#gt_show_big_picture" })), 1 !== n && h("svg", { onClick: c => { a.deleteChart(b), c.stopPropagation() }, className: "icon", "aria-hidden": "true" }, h("use", { xlinkHref: "#gt_close_1" })))), h("div", { className: "single-tv-chart", id: l }), h("div", { className: "k-line-bg-logo" }), !f && h("span", { className: "empty-chart-tips com-color2" }, lang_string("\u9009\u62E9\u7A97\u53E3-\u6DFB\u52A0\u5E02\u573A"))) })), TvTimeSelect = ({ index: a, show: b, resolution: c, onChange: d, widget: e }) => { const f = b => { d(b), localStorage.setItem(`tv-single-resolution-${a}`, b), e.chart().setResolution(b) }; return b ? h("div", { className: "tv-time-select" }, h("div", { className: "flex" }, h("div", { className: "time-type" }, lang_string("\u5206")), h("ul", null, [{ title: "10s", resolution: "10" }, { title: "1min", resolution: "1" }, { title: "5min", resolution: "5" }, { title: "15min", resolution: "15" }, { title: "30min", resolution: "30" }].map(a => h("li", { onClick: () => f(a.resolution), className: c == a.resolution ? "active" : "", style: { marginTop: ["15", "30"].includes(a.resolution) ? 8 : 0 } }, a.title)))), h("div", { className: "flex" }, h("div", { className: "time-type" }, lang_string("\u65F6")), h("ul", null, [{ title: "1h", resolution: "60" }, { title: "4h", resolution: "240" }, { title: "8h", resolution: "480" }].map(a => h("li", { onClick: () => f(a.resolution), className: c == a.resolution ? "active" : "" }, a.title)))), h("div", { className: "flex" }, h("div", { className: "time-type" }, lang_string("\u5929")), h("ul", null, [{ title: "1D", resolution: "1D" }, { title: "1W", resolution: "1W" }, { title: "1M", resolution: "1M" }].map(a => h("li", { onClick: () => f(a.resolution), className: c == a.resolution ? "active" : "" }, a.title))))) : null }; function processtvbars(a, b, c) { return Array.from(a).map(a => { if (0 == b.length || "1" == c) return { time: parseFloat(a.date), volume: +a.volume || 0, close: +a.close, high: +a.high, low: +a.low, open: +a.open }; return "0" == c ? parseFloat(a.date) < 1e3 * b[0].timestamp ? { time: parseFloat(a.date), volume: +a.volume || 0, close: +a.close / b[0].multiple, high: +a.high / b[0].multiple, low: +a.low / b[0].multiple, open: +a.open / b[0].multiple } : { time: parseFloat(a.date), volume: +a.volume || 0, close: +a.close, high: +a.high, low: +a.low, open: +a.open } : "2" == c ? parseFloat(a.date) > 1e3 * b[0].timestamp ? { time: parseFloat(a.date), volume: +a.volume || 0, close: +a.close * b[0].multiple, high: +a.high * b[0].multiple, low: +a.low * b[0].multiple, open: +a.open * b[0].multiple } : { time: parseFloat(a.date), volume: +a.volume || 0, close: +a.close, high: +a.high, low: +a.low, open: +a.open } : void 0 }) } const uidtocutomuid = c => { const [d, a, b] = c.split("_"), e = v4intervals[supportedResolutions.findIndex(a => a == b)]; return `${e}_${`${d}_${a}`}` }; function getSymbolStub(a, b) { return { timezone, name: a, ticker: a, description: underLine2bias(a), type: "crypto", session: "24x7", minmov: 1, pricescale: b, has_intraday: !0, has_seconds: !0, has_daily: !0, has_weekly_and_monthly: !0, volume_precision: 8, data_status: "streaming" } } function getDefaultMode() { let a = localStorage.getItem("klineMode"), b = "30"; if (a) { let c = a.split(",")[1]; b = supportedResolutions[c] } return b } function addZeroBeforeNumber(a) { return 10 > a ? "0" + a : a }